Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUW2vbTBB9168YAiEv+VaSyRcakUBbuyWBJjX2YwllrR1vFq92lL3INfTHl13Zlu1C6UUv0p657Zw5o1pTEGMySyWrDICv3Yf38/H8YWJVhzZCAGj4QqOoYMm1wwyg4YZLnHuyXOJYc+fQVeBtwKwm47kyaGfBeNVgBXtEDEYRE9ep6ucOrVUCK/ieinVonSIDdzDKEvCl1UEq45774wCwM0VsSMmkbWvWlay26mzv/HvuB/hB5B/HMts37Y6S/H2a+FE/H6UC2Bq/+k2LcAcnKWME60Zn2UnUP12BUesVxRHAyTPfOI+NGEtLoYW7XgMAmuQn7FBXoMySsv1UKyjZFbvJBNWrXl1updoH4zzXequgVVjg1NK3TdKIDs6jHT9MZhWURcFurlnBirwso7ENM3wN6HyyNRnACzlveIODqi7e8rW7yABUwyVWsHrjmKwtU5THSv+1qVRXslHJiqOrj9JVNPq0GIbMpqHg3gX/MmxCnRrfLgu4no09PiPyFeSpDwpiaqlTIjrytRuamzzN+96ur1jByuLAQg1Xptodmaaa62y3kBNcBCmVkffcCI12t4IA2Kk6DuyeW1FBgw3ZDeMdVzrG3ZZF8aguDQlcuiP4fAeq+HYfLeLt/+eXibmfXHfoke+vRxD57Ld+yiOLecdtrtUi3xKdDw4nkwAw6NdkV9Mk4yee/ixGRQOZR+5eA1oucBBKIrPIE50tiUdu1BKd3xZGX6di1qBHlzdbq8t+AAAA//8BAAD//zWgzPYQBQAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV247UOhaG7+spIiTEDZX4fIi4gKE1AxpgEPMEy/ZydURi19iuanqefpRUF909e0tbW9pcxVkH+8vv3867WrHVcdd1sAQl1sG+U4Z6Q522XAAyF7lxNlIWjKXKcKtZoNG5qIIOVqMkVhAQ2lFug6COy7e3rR3rOAy15QIH7A85H2aE41R7n5fh+8lhSdiw7gvOCBWH6/NMe0Z7MrgpDfOUTj+GjWtrmbFteDZqEVkEjcgZBKKRakapZtJaxoQRmnBKPFBrDKNCUmOIctw6GiDYSH4Rnm/zBU9rw4TlLEiltNfANYAC7p0DQSghoIzmqN0qnuFoHBqukaOGGAiYP8QzdQ+lTRF8q3ufpkc60pteDz5N++N8Okyp7jfI/Qa5v6T7dvjvhdNSKrSNRhHKgkJwGkmUnAUw0RANxpEopUQkFqOxXOlgPKdMcKK5cz85D1O7PbmNzefUYEpYwtPhA18dQr5Lc4aw6ih6O/gy7R/r1m/Zb4mn2H2D0m/IUJarQ6k2nDlqmUOJwKnQVESNVGEMEmVUkgtttXDORUEDRuUIi8pYTrkhXvy1Fli5njkURAiaEhKl0CBI4Mii4UaSQBw4Lb1CkOik5JGAIRB81JxK6TDSGEj4RXhXhwJSHrSTnkgXqCEI1kmnTBTCBQDtohOUcAEMIw3KxGCQMmm11UEJFn+FQ1fI/3eoQ+MtSCAKHXoTHQ1coVHaB0Kik1prLRRYQxkQD8isUlqbGI21XrLHe+jquz5k/x3LBnkRpzZok18fbsYBoPhbJYZL2Z6RnpIHnvfzqTYsX2DBsfN5ORastccfsBxnXCfcvc8pToe/QcWxW3CJ68L+0vWscPjd7o+pNkge/1Hy6XhZJeWA9XniW55x7L7kgLt/Xvx2WXW7wFNO90s+1Xendjt2EeaKu67zh7XxpkxnLGNX72vDJfyMf8u5jd2wvs/5FL6WfJ7CWgh3dQtu/Ddf/j12lJBeiX7V5EkmLzCl8fraz9nDajJMq6A36E6Hw5QOHyCFGUsdu1ZOKxWeJ9+mnD5ACZtcudz3cIZpXvveUEI+T69XAWJ9Fn55DU6bOn8viG/ky9fTAoffll6jz2p3XXeba0uw4L/OWMoUcOxevYW7+mrXddsx2ST9CquKwxnKME/ueryHx4Jd18358AnPOI8d23VdwnaXy/evm7EfjJKmNZEDfgKH8/ajvSxyOb79lIey7elasyXXwX6N9c/L1vjYvXixzZc+Q/3PCQsEfP/x5tuTzSHDtj3HHD5DmiLW9vAh2PyTe2NYHrJ1528hpY1t/+d9O0AIOdXB5dxqK3DcP0zX38My7/4HAAD//wEAAP//W1HEpV8IAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
