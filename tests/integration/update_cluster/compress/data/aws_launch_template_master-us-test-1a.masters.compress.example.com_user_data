Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW648bNRD/nr/CKqr6pbebvYYCq1Yi5AoXeldC0gcSqpBjTzYmXns7tvcuiD8ejb153oVS+hESKVnPy/P4zcwKbYMcWbNQVdljrOaGVzDzFnkFI82dA1cyjwF6whrPlQGcBuNVDSXbUuSOKcmKiPZ+agFRSSjZnz3GGGsBnbKGPWfnvUj4tdGhUsa9T8cdIXugbLYzmVXYiKwtMoHqwVb4n4nv0fc0P1k3wxS0OzDy783Qg3h/YIqxjvmbXzfAnrMjk6SRtecPekdan+VCZhuvLJWAHX1ma+ehlqMKbWjY84QBxrStrqAFXTJlFra3rWrJimyQDXrSihUggcCtVDM2znOtOwSBEbiO93WAYyZo3QMv5EgH5wEdKUILxsenPetPskFWPIkIVeZ+3irMYTgZzwDb5AHX2t5MULVKQwWy3MTAjTXr2gY3DH5ZsgXXLpIbNQxSgREQbz9jZBENeHCZa0UmYcGD9kk0XTOywfiSFUQLfmlR/cEpwGtLuB/qG752Q3Kjx9hcGTmUEsG5kvWz+KVmoQ6coG2VBCwZv3GUA8PnGoayVo5inKQSJ69e8RpcwwVcqQWItdAQyVeqVn7KTQUYz+SgEjAUgnyMpAllzHkw/q3VoYYrPgcdORcptP3G36e/thowBjYDYY1MzOvguVem2rr5DuZLa1eR+ZZrJU+zX1kJU3AelSCzkTYFZwMK+DlYzykJXsiU5i7ypfdNmefF+Vcxe0U56PeLQ8HN0Ok08gSmL+7TPO8xpmpeQclWX7usEpgpm1PNz3ijXIJRW2TnqU7E0OAnCAtAhE0pX6+bzWVj4wEN1+NJPF5a5w2vU3Ve3O7xdk1EPiB8COD8ErgEjGABGWucrPKqQqi4t3gs++LWI7+Mj+SVut2o/HI2hdp6OIsSZ8d6P1BLJ71jhcg6ln/jyPUa7lchLrU7iIAwsehLNhg8iZR9AI6dC4RvqoQr85w3KlNdwjJh64aSmcEtrxsNRLhj4cd3L2dvpuNPMJHbBoySeVvkv9+s3M5iN27Gk9gvJSv6/ezpgKCRxyHjUh98x8UKjCwjwNKAGVnj0WoNeB1X5XbQCO6BQD0aX0zdbtR4z8XyAuh3Sq0jlIbZ2ogJoLKyZEXdd6eGgEheksXk4jdPk4vFjklAoU18b/7SHg4IIzI/tcHTNt/MuxPYF9sIz+ouxF0T6AQ8DbFr0xzeo5V31wQhPDg4nEYjBAnGK643qaKrJ2hv1+VHA2/CNKEz8ijOZddpuzeOR9/yG/fodJBNvGovrj1/SWAmliCDTuU9YcNtZT4vP91gKU9vJhGX8AUqmkjMpc28pU+t9SXLP4Kii1ezPZwX/T2OjTt1c8wIy3q7gy5gHqpKmeqSG6mp/TcxQJtm9yVHWbIaaovrjLdcadJ7VvT71+qxsRIW7oD8cENU9O++R4BnXz58HLN8R3RDPZD9+5JTPhPyJ5yymLccc63meZfofCdwB6kG/I3FVdq3XW8ZRQxrrrn7EAB56vHDoUHpbKy85kYtwPnuYvAi371D5HXHdb2aU6Zf/l/4/1rhabNW9AqG3YSheDf1/gsAAP//AQAA///mAXr2jA0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RW25LjthF911ewXOXyi0niRlxUfrCzW4m34nG21l/QABoSayhCASCNx1+fAinNSM46F2c3fqIEnO4+3X0awHc5Y8nbTdPAwUtRf7RNCEwwNijqhKNopJHIpQpDYIOQ0hoZrMSB0MA0oGcmCCosHZiAgXkE8u2+lGPe9n0uMcEOu12MuwnhOObOxUP/eLKYZiyY24QTQsb++j3TjpGO9Hac+2mcTz/3C6/FZMKy0INBm4EQFTingWjPkGiGljIxaCWFEWYYTODEOjdYBGTScR04MsUEk8x9JnquTAs9o5RmwnDmBymVU8AVgATurAVBKCEgteKorDcKNUdtUXOFHBUET0D/W3o6t5DKGMCV3Lp5fGVHOt2p3s1je5xOu3HO7UKyXUi263ZXdr+sPKUUVAvjrNJAgFLDGAfBlA/eUfCotaAMgzIUqKCGM8qcdhqZ8UIo+8JzN5b9yS7cXJwLjDMmf/vzwi/3Pj7NUwRf6yg60bs0tq+4mku7bNzS7gqkbqEM6XBVqFBgpRNM8eC4tcRZjc4MVDFFvaGDNsQNIC3BQVhmDEUFOliLSlkiUXxaCVRedwplAwohB62IM4ZKhdIJKSXj6HUgA1DPSLDOCu3ASqk1JYZrYwfmtZKMfyZ6V4UCUu6VHRwZrKeaIBg7WKmDENYDKBusoIQLYBiolzp4jZQNRhnlpWDhcyi0kvy1QiXyoAlqMVB0FpXlw2CYUIpRx5ExaVFaxjQ4AI+okHKpq4ljBDV9HfSr7jof3SOmheRanFygjK5+7IQ9QHJ7KfoV1jLSUdKRhc+b6ZQLph/hgNvGxcMxYc4d/gyH44TV4eZNnMO4+xNk3DYHPIQa2K1Wd8D+o9bv5lxgdviXFE/HNcoBqm17ym3BXFoK96APccJt87CANn9d1bdyWI7zOc7Ph3jK353KftsEmDJumsbtqunbNJ4xbZv8nAse/Mv6hxjLtunr/yme/PsUz6OvQHjKy+KSzdsff9o2lJBOiq5W6GYnHmCct9e/3RQdVMnhXMv7Fu1ptxvn3fcw+wlT3jYlnSorPI+ujHH+HpJfihfTcwdnGKdq9w0l5GH8eo4eQ75b/vK6ONZv/nNC/Gb48uvxALt/hl5X77CbptnHXGY44N/OmNLocdt89S085a82TbMMzVLS91Cr2J8h9dNor8PevwI2TTPF3Q94xmnbsE3TzFieYnp8v8j8Ipt5rBvR4w9gcVqu3TXIOszdGPu0dHVt/bJd4W1d7e6B9dxMcWqPE8y4bb744l+iV4cX2BznB8h/P2ECj2/evf1w007SLw09Rv8A8xgwl0vqWNzNudMfLrtVFwl3Y3X/k9ujPy0VvyrO7WGel1Tb/34oevA+zrm3MZZcEhzbi7vuGQ7TBot7Ifk7A7xkUdPzfVXv6vsTOMMzziWv7o4pllir966K8O651TR7yPttoyx3Kkjw1gOllqJTglhfn1vGaRGYMFYhoqYaghkC85xRIznRmokB9Nr+RWcv0ba0o6YjLUzHPXR8geR4Sg4v2mub6xH5cl53j3pRjB1nSCPm/jEec3/vqF9mKfcvgX59Vd96vnke3Ohn8frRh8FHArX/UaC6fzqeWZd5Bwf4Jc7wdLmQfkcKL6+Na4OkYYo4MI46MxCLcoAgCOcKfHAOHQHFtOEkAGdMWEs8Q60D1TRwg+D/4AbVdP4vDfrtQP9rg249rxf33fg/4vO2WZHHMWM6Y2r3CFPZuz26x3qqLUfZ65xebv/ftlmn9x8AAAD//wEAAP//k3ZvRiUNAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
