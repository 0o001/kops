Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/709B9I+ibxrJSvPvNqEF5jrd4jXpPLsPA4ZioMmzzJki1SOpxMM+/HCk5Kck67q+3BIgke754Xd3EtoGObZmqapywBi/di9fzMfzyTmqFpBIjIHhCw2yZEuuHQwYq7nhFcy9RV7BWHPnwJXMY4CBsMZzZQBnwXhVQ8m2FLljSjIsotcfW0BUEkr2R3TWAjplDXvOTgeR8EujQ6WM+5Bed4TsgbLZzmRWYSOytsgEqgdb4b8nvkff0/xs3QxT0u7AyD83Qw/iw4Epxjrmr37TAHvOjkySRtaePhgcaX1RCJltvLLUAnb0M984D7UcV2hDw54nDDCmbXUJLeiSKbO0g21XS1ZkZ9nTgbRindDl1qqZGOe51h2CwAjcRH8dLJkJWg/ACznWwXlAR4rQgvGu3MdMyZ5kZ1nxJCJUmbt567CA0XQyB+zwzbW211NUrdJQEcq7HLixZlPb4EbBr3bY540aBanACIjeTxhZRAMeXOZakUlY8qB9Ek1uxjYYX7KCaMGvLKrfOSV4ZQn3I33NN25EYQwYWygjR1IiOFeyYRZ/aVhoTqdoWyUBS5rTQT+YI1krRzlOU4tTVK95Da7hAi7VEsRGaIjkS1UrP+OmAozvFKASMBKCYoykKVXMeTD+ndWhhku+AB055ym1/cHfp7+xGjAmNgdhjUzMq+C5V6bahvkeFitr15H5jmsl72e/thJm4DwqQWYjbQbOBhTwU7CeUxG8kKnMXeYr7xtX5nlx+lUsX1GeDYfFoWS/dTqVPKHpf3eqng4YUzWvoGTrr11WCcyUzanrJ7xRLgGpLbLTInaKGBr8FGEJiNA3882m6b1NjAc0XE+m8fXCOm94nfrz8maPtxsjigHhYwDnV8AlYIQLyNjlZJVXFULFvcVj2Zc3HvlFfKSo1E2v8vPJDGrr4SRKnBzrfU9DnfSOFSLrWP6to9BruFuFuDTwIALC1KIv2dnZk0jZh+DEuUAI71vBG5WprmCZsHVDxczghteNBiLcsvDD+1fzt7PJZ5jIbQNGybwt8t+u125nsVs4k2mcmJIVw2H29Iygkcc149IkvOBiDUaWEWFpxYyt8Wi1BryKx3K7agT3QLAeT85nbrdsvOdidQ70d0bDI5SG+caIKaCysmRFPXT3rQGRoiSLKcRvnqYQix2TgEK3+M76pUscEMZkfmaDp3veb7x7sC+2GZ7UXYq7IdAJeBri3KZNvEcrbx8KQnhwcLiPxggSjFdc96Ui11O0N5vyk4k3YZbQGXmU56qbtN03x6Nv+bV7dH+STXS1l9devCQwFyuQQaf23mPDbWW+rD7dYinvv00inuHu0425dJu39Jm1vmT5J1B0/nq+h/NiuMex8ar2rxlhWW+v0DksQlUpU11wIzWNf58DtGl7X3CUJauhtrjJeMuVJr1nxXB4pR4bK2HpDsgPe6Ki/+47BHj2/4ePY5VvifbUA9m/bjnVMyF/yqmKecsx12qRd4XOdwK3kGrAX1tcp4vbzZZRxLDmiruPAZCnGT9cGlTOxsorbtQSnO8cgxf57isirzuuG9ScKv3qv8b/2xpPl7WijzDsNgzl2/f7TwAAAP//AQAA//9K639RtA0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RXy47jNhbd11cIAYJsIonvh5FFMt2YSTDpTKPzBZfkpS2UJHpI2dWVrx9QKrvKmQ7mkaqVZPLcw3OflH8oBZeyu2samIIS9aVtlKHeUKctF4DMRW6cjZQFY6ky3GoWaHQuqqCD1SiJFQSEdpTbIKjj8vvDshzLru/LkjLssduntB8RjkPpfJr6+5PDPOOCpc04IhTsL88z7RjtSO+GuR+H+fS5X3WtJiMuqzwbtYgsgkbkDALRSDWjVDNpLWPCCE04JR6oNYZRIakxRDluHQ0QbCRvJM8v4yZPa8OE5SxIpbTXwDWAAu6dA0EoIaCM5qhdDZ7haBwarpGjhhgImP8oz5QW8jJE8Etp/Tw8qyOd6XTv56E9jqf9MJd2FdmuItttu1v2v21ZBhRacWmNt9LwaJwkishIbVBeo8VouWdUaaKEkqh5iN4IROUUB8afde6H5XByqzaf5gWGGXN4+fqkr/QhPcxjglDjKDrV+zy0z7jqS7tuvJTdLZC7J8nREgwqeIySC1SBAlJtiQ5eoxNEUeGMFRKCgKgjQWsCc6h9QEOV9Ooq+Rq/7t6Ubkg1oZAHLP19OpZ+y3IL4/EAHb3J9DGnJdV0f/sF958rZ+P5ouM31Fe6ly5fqevG6XhmXeEdTPBbmuHhqQj+W5lbSVrLUKNjwNDyqK1FCRatQaepUVwLziUTzisZFSdcakYoaBuFdZQH8gpx8weYZxzL64TtwvbKUbvQ1nGYp8s4pNpw5qhlDiUCp0JTETVShTFIlFFJLrTVwjkXBQ0YlSMsKmM55YZ48brzpuq6GYcgQtCUkCiFBkECRxYNN5IE4sBp6RWCRCcljwQMgeCj5lRKh5HGQMIbybuMQ0DKg3bSE+kCNQTBOumUiUK4AKBddIISLoBhpEGZGAxSJq22OijB4luMwyry9+PQWuO4U0pZzmWkQIPxQsvotGeUYqAoqGcxcs20tNwik4wrpbx3Olj63COXou1C8veYV5FbcMoCy+Drw43YA2R/UKLfYC0jHSWduuphUVrreZAiCi9ccN5bCRCJ105SDkbIYKKVhKOXjgtvo1EA1Hkuoif+z/Xsmsa3nnX1kD/XtbcytzwGIxhyxRVYGZBxKn1AqPcAMMO4lACeKGkwEmdUkMEzISxRSnITKX+FuL3trHulqF1n3bvxVBbMv8CEu8an6ZixlA4/w3QcsVLdvUtzHPZ/gYK7ZsIp1oP9ZnUD7L9o/dNcFpg9/i2n03E7ZYJq255Ku2BZWgq3oE9pxF3zYQXd/X0bdZuG9UN1TvPjlE7lh9Ny2DURxlIz7/fV9H0ezph3TXksC07huv4ppWXX9PX3mE7hY07nIVQgPJR1cfXm/S+/7hpKSKdEV9vxxU6aYJh3l5/dmDzU+YZz7eX36E77/TDvf4Q5jJjLrlnyqarC8+CXIc0/Qg5r8FJ+7OAMw1jtvqOEfBi+nVPAWG6Wv74sDvVZ/poRv5NffztMsP936GX1BnvXNIdUlhkm/McZcx4C7ppvvoeH8s1d06wTeg3pR6hR7M+Q+3Fwl5ulfwbcNc2Y9j/jGcddw+6aZsblIeX7j+tMfSqbeagbKeDP4HBc/1A0TS3BS/PU9/VbL6dxxNwe74dd89VXG+7aExWZ1+xvJbJuV9q2rna3wCe29jjCjFeyP0JvhDew3yHwsx9PAduY09Ti5wXzDGNbe7J1MNbqrIld7ec0f4DyzxNmCPjup/efXpQN6dfCOabwAeYhYlmeQoyLf9n+09Nurb+M+6HK+9UfMJzWzF4q+9Knu7v2f2++HkJIc+ldSktZMhzbJ7ruEabxDhd/Ffl/HnD1oroX+tolG/crkOEZ56VsdNvdeSP2Hh93a+209WMA8xlze0AYl4M/oL+vOVgD/8z6dAH/sc121r8AAAD//wEAAP//F0jaKxUPAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
