Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW3Y8bNRB/z19hFVV96e1mr0eBVSsRcoULvSsh6QcSqpBjTzYmXns7tvcuiD8ejb1JNrk7SukjJFKyni/Px29mVmgb5NiaparKAWM1N7yCubfIKxhr7hy4knkMMBDWeK4M4CwYr2oo2Y4i90xJVkS091MLiEpCyf4cMMZYC+iUNew5Ox1Ewq+NDpUy7n067gnZA2WzvcmswkZkbZEJVA92wv9MvEfvaX6yboYpaHdg5N+boQfx/sAUYx3zN79pgD1nRyZJI2tPHwyOtD7Lhcw2XlkqATv6zDfOQy3HFdrQsOcJA4xpW11CC7pkyiztYFfVkhXZWfZ0IK1YAxII3Fo1E+M817pDEBiBm3hfBzhmgtYD8EKOdXAe0JEitGB8fOpZf5KdZcWTiFBl7uatwwJG08kcsE0ecK3t9RRVqzRUIMttDNxYs6ltcKPgVyVbcu0iuVGjIBUYAfH2E0YW0YAHl7lWZBKWPGifRNM1YxuML1lBtOBXFtUfnAK8soT7kb7mGzciNwaMLZSRIykRnCvZMItfahbqwCnaVknAkvFrRzkwfKFhJGvlKMZpKnHy6hWvwTVcwKVagtgIDZF8qWrlZ9xUgPFMDioBIyHIx0iaUsacB+PfWh1quOQL0JFznkLrN36f/tpqwBjYHIQ1MjGvgudemWrn5jtYrKxdR+ZbrpW8n/3KSpiB86gEmY20GTgbUMDPwXpOSfBCpjR3ka+8b8o8L06/itkryrPhsDgU3A6dTiNPYPriLs3TAWOq5hWUbP21yyqBmbI51fyEN8olGLVFdprqRAwNfoqwBETYlvL1ptleNjEe0HA9mcbjhXXe8DpV58VNj7dvIvIB4UMA51fAJWAEC8hY42SVVxVCxb3FY9kXNx75RXwkr9TNVuWXkxnU1sNJlDg51vuBWjrpHStE1rH8G0eu13C3CnGp3UEEhKlFX7KzsyeR0gfgxLlA+KZKuDLPeaMy1SUsE7ZuKJkZ3PC60UCEWxZ+fPdy/mY2+QQTuW3AKJm3Rf779drtLXbjZjKN/VKyYjjMnp4RNPI4ZFzqg++4WIORZQRYGjBjazxarQGv4qrcDRrBPRCox5PzmduPGu+5WJ0D/c6odYTSMN8YMQVUVpasqIfuviEgkpdkMbn4zdPkYrFnElBoE9+Zv7SHA8KYzM9s8LTNt/PuHuyLXYQndRfivgl0Ap6G2LVpDvdo5e01QQgPDg6n0RhBgvGK622q6Oop2ptN+dHAmzBL6Iw8inPVddr+jePRt/zaPbo/yCZe1Yur5y8JzMUKZNCpvPfYcDuZz8tPN1jK+zeTiEv4HBVNJObSZt7RZ9b6kuUfQdH5q3kP58Wwx7Fxp26PGWFZ73bQOSxCVSlTXXAjNbX/NgZo0+y+4ChLVkNtcZPxlitNes+K4fBKPTZWwtIdkB9uiYr+3fcI8OzLh49jlm+JbqkHsn9fcspnQv6UUxbzlmOu1SLvEp3vBW4h1YC/trhO+7brLaOIYc0Vdx8CIE89fjg0KJ2NlVfcqCU4310MXuT7d4i87rhuUHPK9Mv/C/9fKzxt1opewbCbMBTvtt5/AQAA//8BAAD//zWl1GuMDQAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RW25LjthF911ewXOXyi0niflH5wc5uJd6Kx9laf0EDaEisoQgFgDQef32KpDQjOetcnN34iRJw0H26+3QD35WCtWw3TQOHoMT8o21iZIIxqakXnqJVViFXOsrIpFDKWRWdQkloZAYwMBsFFY5KJkCygEC+3dd6LNu+LzVl2GG3S2k3IhyH0vl06B9PDvOEFUubcUQo2F+/Z9ox0pHeDVM/DtPp537htRwZsS70QBorCdGRcxqJCQyJYegoE9JoJaywUtrIifNeOgRkynMTOTLNBFPMfyZ6vo4LPau1YcJyFqRS2mvgGkAB986BIJQQUEZz1C5YjYajcWi4Ro4aYiBg/i09U1rIdYjga2n9NLyyI53pdO+noT2Op90wlXYh2S4k23W7q7tfFp4KUGjFpTXeSsOjcZIoIiO1QXmNFqPlnlGliRJKouYheiMQlVMcGH/luRvq/uQWbj5NFYYJc7j9eeFX+pCepjFBmPMoOtX7PLSvuDmWdtm4pd1VyN1CGfLhqlChwSkvmObRc+eIdwa9lVQzTYOl0ljiJShHUArHrKWowUTnUGtHFIpPK4GZ151CmUQhlDSaeGup0qi8UEoxjsFEIoEGRqLzThgPTiljKLHcWCdZMFox/pnoXRUKSHnQTnoiXaCGIFgnnTJRCBcAtItOUMIFMIw0KBODQcqk1VYHJVj8HAqdSf5aoQ6NtyCBKHToTXQ0cIVGaR8IiU5qrbVQYA1lQDwgs0ppbWI01nrJ5AvPq+66kPwj5oXkmpxSoQ5+/rgRe4Ds90r0K6xlpKPkwufNeCoV849wwG3j0+GYsZQOf4bDccTZ4OZNmuKw+xMU3DYHPMTZsV9P3QH7j55+N5UKk8e/5HQ6rl4OMJ9tT6WtWGpL4R70IY24bR4W0Oavq/pWDss4n9L0fEin8t2p7rdNhLHgpmn8bj76Ng9nzNumPJeKh/Cy/iGlum36+f+YTuF9TuchzEB4KsviEs3bH3/aNpSQToluztDNTjrAMG2vf7sxeZglh9Oc3rfoTrvdMO2+hymMmMu2qfk0s8Lz4OuQpu8hhyV5KT93cIZhnM99Qwl5GL6eUsBY7pa/vC4O87f8OSN+I7/8ejjA7p+h19U77KZp9qnUCQ74tzPmPATcNl99C0/lq03TLE2zpPQ9zFnsz5D7cXDXZu9fAZumGdPuBzzjuG3YpmkmrE8pP75fZH6RzTTMGyngD+BwXK7d1cnazN2Q+rxUdS39sj3D23m1uwfOczOnsT2OMOG2+eKLf4leDV5gU5oeoPz9hBkCvnn39sNNOUm/FPSYwgNMQ8RSL6Fj9Tdzpz9cdmddZNwNs/mf/B7Dacn4VXF+D9O0hNr+903RQwhpKr1LqZaa4dhezHXPcBg3WP0Lyd/p4CWKObzQz+pdbX8CY3jGqZbV3DGnmubsvZtFePfcapo9lP220Y57HRUEF4BSR9FrQVyYn1vWGxGZsE4joqEGopWRBc6oVZwYw4QEs5Z/0dmLty3tqO1IC+NxDx1fICWdsseL9trmOiJf5nX3aBbFuGGCPGDpH9Ox9PeG+qWXSv/i6NdX9a3lm+fBjX4Wqx99GHzEUfsfOZr3T8cz6wrv4AC/pAmeLhfS7wjh5bVxLZCyTBMP1lNvJXGoJERBONcQovfoCWhmLCcROGPCORIYGhOpoZFbhPAHF2gO5/9SoN929L8W6NbyenHftf8jPm+bFXkcCuYz5naPMNa936N/nKfaMspe+/Ry+//2mbV7/wEAAP//AQAA///FJpYFJQ0AAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
