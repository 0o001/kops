Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWT3PbthO961Ng5je5xaRo+5e2nFwUOY3VRCkrJU2vK2BFoQIBZgFQVj99BwCpP7Y1mU6uGc/Y1u5i8Xb37YO4Ml5MjV7LuhwxBjv79s1yupzdkeyQgokx1LBSKEq2BmVxxFgDGmpcOkNQ41SBtWhL5sjjiBvtQGqkhddONliyg0UcnSIkVqb+gB2qkkm9NiPGOiQrjS5Zkd1mxfVIGL5NGOxWtjNtHSjV34Oa07510ugePNNeqRE6LqbKW4dkw0HsUDubyjikvwnpb2IdUj/v2/oVTqrZEqnvAihldhXJTiqsQy8iCsZAG71vjLcT7zbHDkErJ15I1Bzj7VcsZCSNDm1mO54JXINXLoWma6bGa1eyIti82xiS/0AocG4ElmyidrC3kwBjxNhKajERgtDako2z+DNiLE6zItNJgVSGaY6G8U1EI22osVK+lrpH9REatC1w/CDXyPdcYTR/kI10C9A1UvwcAEqOE84Dxmi6SwWckuDU/skopAh/idxokZxz78BJXR/AfMHVxphtdP4JSorL7o9G4AKtI8lD2mhboDWeOP7hjYNQquMiNbOvb+Nca8s8L65/ik0qytvxuDiP/L1DIimGQeWJM/979uj1iDHZQI0l2/5ss5pTJk0eZnsFrbSJLl2RXRdxHsGh0FWEayTCYWSf9u1w20w7JA1qVsWP98Y6DU2awtuHE99xWwIGwq8erdsgCKRIChRxlikr1DVhDc7Q49i3D47gPv4bUMmH4chfVwtsjMOrGHH1+Nw7Mr5N5x4fiK7H8Z9tgN7g80eCN6w1ck9YGXIlu729iZZTos2s9YHHwyiglZnsG5Zx07ShmRk+QNMqDIYnGX778n75eTH7Dyly06KWIu+K/O/d1h4z9rIyq+JelKwYj7NXt4EaeRQTmzbhDfAtalFGhiUhmRrtyCiFNI/CeRAUDg4Draezu4U9SopzwDd3GH4vwvJwqXC517xCkkaUrGjG9tKy84QyZEwQf3mVIBZHZyBK0OVn+8ejnHrCaUi/MN4FbR907QL3+aHCq6Yv8bgEKhFPYdzbpLcntkPd5wz3Fs9VZ0ooUDsJamhVuLoi87Avv1l46xeJndHXXK6kjflOwJ+ACgFLvkHhVZrhhRz2EPN9TejVo7z8zPA67F7/VjO7tw4bcbAvjHEly79BlbuPyxMyF+MTj4kP5PAxC4RVhwflDle+rqWu70ELFXZ8qAG7JNH3QKJkDTaG9hl0IFU497oYj+fypTYC1/bM/GIwyvDX/kqIr///4mXs8pPQwXoW20tu4nAFoVV5B5Qrucr7bubHgCec0+h2hrbphey3RMvgMHoO9qtHgrSt5+sfetYaMdNrgunwHWf2hBwteIvlTfYqhc9ByzVa1+NEx/Pjl4S86b1RgTbeCbPT7wg4DipwM77gmpJ0koOqjLABpx01EOb3/gedftDJxoe6lmECvZaFHhw58L1c+xcAAP//AQAA//9ek9B+UQwAAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/1TOwU7DMBAE0Lu/wj+QRqhUKpa4pEi0h0aQSwK3xd6QBG/WeO0Af48Cp1xHb0Zz8pzdU+RldBiNhi9RJ5778b0CQaMJqRdTltZnSRhlh99AwePOMpWWKUSUTagusySYLT5GzqEGWkdg7RZZioSSihvYooY9Gn39Q6pmhzn8XziDDEZ3tLdumajavx7xULnP53ZoWr6+ffiHl3M4XhzeHrrlbvrhe/ULAAD//wEAAP//F6F2fs8AAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
