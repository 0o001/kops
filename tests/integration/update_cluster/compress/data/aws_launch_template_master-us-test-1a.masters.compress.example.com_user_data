Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW62/bthb/7r+C6EXRL41kpbm9t0ILzHW6xWvSeXYfA4ZioMljmTNFqoekEg/744dDSn4lWdf145YAiXTej985R0LbIMfWLFVVDhjj1+7Vy/l4PjlH1QISiTEwfKFBlmzJtYMBYzU3vIK5t8grGGvuHLiSeQwwENZ4rgzgLBivaijZliJ3TEmGRfT6QwuISkLJfo/OWkCnrGEv2OkgEn5udKiUcR/T646QPVA225nMKmxE1haZQPVgK/zXxPfoe5pfrJthStodGPn7ZuhBfDwwxVjH/MVvGmAv2JFJ0sja0weDI62vCiGzjVeWWsCOfuYb56GW4wptaNiLhAHGtK0uoQVdMmWWdrDtasmK7Cx7NpBWrBO63Fo1E+M817pDEBiBm+ivgyUzQesBeCHHOjgP6EgRWjDelfuYKdmT7CwrnkSEKnM3bx0WMJpO5oAdvrnW9nqKqlUaKkJ5lwM31mxqG9wo+NUO+7xRoyAVGAHR+wkji2jAg8tcKzIJSx60T6LJzdgG40tWEC34lUX1G6cEryzhfqSv+caNKIwBYwtl5EhKBOdKNsziLw0LzekUbaskYElzOugHcyRr5SjHaWpxiuoNr8E1XMClWoLYCA2RfKlq5WfcVIDxnQJUAkZCUIyRNKWKOQ/Gv7c61HDJF6Aj5zyltj/4+/S3VgPGxOYgrJGJeRU898pU2zA/wGJl7Toy33Ot5P3sN1bCDJxHJchspM3A2YACfgzWcyqCFzKVuct85X3jyjwvTv8Xy1eUZ8NhcSjZb51OJU9o+s+dqqcDxlTNKyjZ+v8uqwRmyubU9RPeKJeA1BbZaRE7RQwNfoqwBETom/l20/TeJsYDGq4n0/h6YZ03vE79eXWzx9uNEcWA8CmA8yvgEjDCBWTscrLKqwqh4t7iseyrG4/8Ij5SVOqmV/npZAa19XASJU6O9b6joU56xwqRdSz/zlHoNdytQlwaeBABYWrRl+zs7Emk7ENw4lwghPet4I3KVFewTNi6oWJmcMPrRgMRbln4/sPr+bvZ5AtM5LYBo2TeFvmv12u3s9gtnMk0TkzJiuEwe3pG0MjjmnFpEl5ysQYjy4iwtGLG1ni0WgNexWO5XTWCeyBYjyfnM7dbNt5zsToH+juj4RFKw3xjxBRQWVmyoh66+9aASFGSxRTis6cpxGLHJKDQLb6zfukSB4QxmZ/Z4Ome9xvvHuyLbYYndZfibgh0Ap6GOLdpE+/RytuHghAeHBzuozGCBOMV132pyPUU7c2m/GziTZgldEYe5bnqJm33zfHoG37tHt2fZBNd7eW1Fy8JzMUKZNCpvffYcFuZr6tPt1jK+2+TiGe4+3RjLt3mLX1mrS9Z/hkUnb+Z7+G8GO5xbLyq/WtGWNbbK3QOi1BVylQX3EhN49/nAG3a3hccZclqqC1uMt5ypUnveTEcXqnHxkpYugPyw56o6L/7FgGe//fh41jlW6I99UD2z1tO9UzIn3KqYt5yzLVa5F2h853ALaQa8NcW1+nidrNlFDGsueLuUwDkacYPlwaVs7Hyihu1BOc7x+BFvvuKyOuO6wY1p0q//rfx/7TG02Wt6CMMuw1D+fb9/gMAAP//AQAA///jXyo4tA0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RW3Y7jthW+91MIAYLcrCT+/xi5SLqLNkGz6WLzBIfkoS2MLLqk7N3p0xeUbM94u4uizcyVJPI7h9/5+6ifS8G5bDdNA4egRH1pG2WoN9RpywUgc5EbZyNlwViqDLeaBRqdiyroYDVKYgUBoR3lNgjquPxpP8/Hsu37MqcMO+x2Ke1GhONQOp8O/cPJYZ5wxtJmHBEK9tfnmXaMdqR3w9SPw3T63C+8FpMR54WejVpEFkEjcgaBaKSaUaqZtJYxYYQmnBIP1BrDqJDUGKIct44GCDaSV6Ln53Glp7VhwnIWpFLaa+AaQAH3zoEglBBQRnPUribPcDQODdfIUUMMBMx/pWdKC3keIvi5tH4antiRznS699PQHsfTbphKu5BsF5Ltut3Nu3+tPC2lQttoFKEsKASnkUTJWQATDdFgHIlSSkRiMRrLlQ7Gc8oEJ5o7d+O5G+b9yS3cfJpmGCbM4fnrhV/pQ/o0jQlCzaPobO/z0D7haiztsvGcdjdD7i6UoyUYVPAYJReoAgWk2hIdvEYniKLCGSskBAFRR4LWBOZQ+4CGKunVjfItf92DKd2QakEhD1j6h3Qs/VrlFsbjHjp6V+ljTnOq5X7zlfCfOmf189XA71zf3D0P+VIey1CjY8DQ8qitRQkWrUGnqVFcC84lE84rGRUnXGpGKGgbhXWUB/ICsfo9TBOO5WVCvXr7IlLIh6vuUG04c9QyhxKBU6GpiBqpwhgkyqgkF9pq4ZyLggaMyhEWlbGcckO8eNnBrrzudAdECJoSEqXQIEjgyKLhRpJAHDgtvUKQ6KTkkYAhEHzUnErpMNIYSHglelfdAaQ8aCc9kS5QQxCsk06ZKIQLANpFJyjhAhhGGpSJwSBl0mqrgxIsvobuVJJf6o5D4y1IIAodehMdDVyhUdoHQqKTWmstFFhDGRAPyKxSWpsYjbVesqfb5dppXUj+AfNCck1OmWEefH24EXuA7PdK9CusZaSj5BkfFqW1ngcpovDCBee9lQCReO0k5WCEDCZaSTh66bjwVTIBqPNcRE/8nxu0pYyvLSr1kFVUghEMueIKrAzIOJU+IFSRBGYYlxLAEyUNRuKMCjJ4JoQlSkluIuUvEOvrisoS6dvxVGbMv8MBt41Ph2PGUjr8DIfjiPWgzds0xWH3Fyi4bQ54iJWHX63ugP1XrX+dygyTx7/ldDqupxyg2ran0s5Y5pbCPehjGnHbvF9Am7+vmrJyWH69pjQ9HtKp/Hya99smwlhw0zR+V03f5eGMeduUxzLjIdzWP6Y0b5u+fo/pFD7kdB5CBcKnsiwu0bz7/Y9tQwnplOhq3z/bSQcYpu31sxuThyokONWheYfutNsN0+4XmMKIuWybOZ8qKzwPfh7S9AvksCQv5ccOzjCM1e5HSsj74c2UAsZyt/z9dXGoz/LXjPij/P7NcIDdf0Kvq3fYTdPsU5knOOA/zpjzEHDb/PATfCo/bJpmkcIlpR+gZrE/Q+7HwV0lvH8CbJpmTLvf8IzjtmGbpplw/pTyw4dFvC5tMw11IwX8DRyOyy9y09SuvHZ8fV/+XnIaR8zt8WHYNt99t+JujVyRean+2iLLdnXb1tXuHnjx1h5HmPDm7Fvo1eEd7AsEfvbjKWAbczq0+HnGPMHY1kFqHYy1O2thF/spTe+h/POEGQK+/fXdx2dtQ/qlcY4pvIdpiFjmS4px9s9n9nDZrf2XcTdUen/4PYbTUtlrZ19ndrtp//fh6yGENJXepTSXOcOxvbjrHuEwbnD2N5L/5wG3KGp4oa9Tsvp+AWd4xmkuq7v1kroj+4CP26V32nrrYj5jbvcI47z3e/QPtQZL4p+8Xm66b9usZ/0bAAD//wEAAP//8ood1ecNAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
